apiVersion: v1
kind: Namespace
metadata:
  name: backstage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backstage
  namespace: backstage
---
# For invoking Argo Workflows
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backstage-argo-worfklows
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - create
---
# For displaying resources in Backstage
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: read-all
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backstage-argo-worfklows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backstage-argo-worfklows
subjects:
  - kind: ServiceAccount
    name: backstage
    namespace: backstage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backstage-read-all
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: read-all
subjects:
  - kind: ServiceAccount
    name: backstage
    namespace: backstage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      serviceAccountName: backstage
      volumes:
        - name: backstage-config
          projected:
            sources:
              - configMap:
                  items:
                    - key: app-config.yaml
                      path: app-config.yaml
                  name: backstage-config
      containers:
        - name: backstage
          command:
            - node
            - packages/backend
            - --config
            - config/app-config.yaml
          image: public.ecr.aws/cnoe-io/backstage:v0.0.3
          imagePullPolicy: IfNotPresent
          ports:
            - name: backend
              containerPort: 7007
          volumeMounts:
            - mountPath: /app/config
              name: backstage-config
              readOnly: true
---
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
spec:
  ports:
    - name: http-backend
      port: 7007
      protocol: TCP
      targetPort: backend
  selector:
    app: backstage
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backstage
  namespace: backstage
spec:
  ingressClassName: nginx
  rules:
    - host: backstage.cnoe.localtest.me
      http:
        paths:
          - backend:
              service:
                name: backstage
                port:
                  number: 7007
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: backstage
  name: backstage-config
  namespace: backstage
data:
  app-config.yaml: |
    app:
      title: CNOE
      baseUrl: "https://backstage.cnoe.localtest.me:8443"
    organization:
      name: CNOE
    backend:
      baseUrl: "https://backstage.cnoe.localtest.me:8443"
      listen:
        port: 7007
      csp:
        connect-src: ["'self'", 'http:', 'https:']
      cors:
        origin: "https://backstage.cnoe.localtest.me:8443"
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: better-sqlite3
        connection: ':memory:'
      cache:
        store: memory
    integrations: {}
    proxy:
    techdocs:
      builder: 'local'
      generator:
        runIn: 'docker'
      publisher:
        type: 'local'
    auth:
      environment: local
      providers: {}
    scaffolder: {}
    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow:
          - Component
          - API
          - Resource
          - System
          - Domain
          - Location
      locations: []
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - url: https://kubernetes.default.svc.cluster.local
              name: local
              authProvider: 'serviceAccount'
              skipTLSVerify: true
              skipMetricsLookup: true
              serviceAccountToken:
                $file: /var/run/secrets/kubernetes.io/serviceaccount/token
              caData:
                $file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
