apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-sync
  namespace: minio
  annotations:
    argocd.argoproj.io/sync-wave: "-10"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-sync
  namespace: minio
  annotations:
    argocd.argoproj.io/sync-wave: "-10"

rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync
  namespace: minio
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
subjects:
  - kind: ServiceAccount
    name: secret-sync
    namespace: minio
roleRef:
  kind: Role
  name: secret-sync
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-sync
  namespace: velero
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync
  namespace: velero
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
subjects:
  - kind: ServiceAccount
    name: secret-sync
    namespace: minio
roleRef:
  kind: Role
  name: secret-sync
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-sync
  namespace: minio
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-5"
spec:
  template:
    metadata:
      generateName: secret-sync
    spec:
      serviceAccountName: secret-sync
      restartPolicy: Never
      containers:
        - name: kubectl
          image: docker.io/bitnami/kubectl
          command: ["/bin/bash", "-c"]
          args:
            - |
              kubectl get secrets -n velero secret-key
              if [ $? -eq 0 ]; then
                exit 0
              fi
              
              set -ex
              
              randString=$(openssl rand -base64 24)
              
              echo \
              "apiVersion: v1
              kind: Secret
              metadata:
                name: secret-key
                namespace: minio
              type: Opaque
              stringData:
                secret-key: ${randString}
              " > /tmp/secret.yaml

              kubectl apply -f /tmp/secret.yaml
              
              echo \
              "apiVersion: v1
              kind: Secret
              metadata:
                name: secret-key
                namespace: velero
              type: Opaque
              stringData:
                aws: |
                  [default]
                    aws_access_key_id=velero-access-key
                    aws_secret_access_key=${randString}
              " > /tmp/secret.yaml
              
              kubectl apply -f /tmp/secret.yaml